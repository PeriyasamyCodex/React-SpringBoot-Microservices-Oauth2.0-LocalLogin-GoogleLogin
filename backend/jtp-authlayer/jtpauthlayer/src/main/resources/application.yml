server:
  port: 8080

spring:
  datasource:
    url: jdbc:h2:file:/data/demo
    driver-class-name: org.h2.Driver
    username: sa
    password: password

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.H2Dialect
    defer-datasource-initialization: true
  h2:
    console.enabled: true

  security:
      oauth2:
        client:
          registration:
            google:
              clientId: 
              clientSecret: 
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - profile 
          provider:
           google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs

        # resourceserver:
        #   jwt:
        #     issuer-uri: https://accounts.google.com  # Google's OAuth2 issuer
        #     jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs  # Google JWK set
       
  
app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:9003,http://localhost:9002
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
logging:
  level:
    '[org.springframework]' : DEBUG

 
